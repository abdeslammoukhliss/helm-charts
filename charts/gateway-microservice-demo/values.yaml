# Default values for spring-boot-microservice.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

appVersion: 0.0.1  # Version of the application

replicaCount: 1  # Number of pod replicas to run

namespace: default  # Kubernetes namespace where the application will be deployed

image:
  repository: abdomokh/gateway-service  # Docker image repository for the application
  pullPolicy: IfNotPresent  # Image pull policy (Always means always pull the image)
  tag: latest  # Docker image tag

imagePullSecrets:
  name: my-registry-secret  # Secret for accessing a private Docker registry
  data: eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJhYmRvbW9raCIsInBhc3N3b3JkIjoiZGNrcl9wYXRfU0E4NVhrRTNXY0hvZ1U2MHhXalhFUF94ek1rIiwiZW1haWwiOiJhYmRvbW9raDM4QGdtYWlsLmNvbSIsImF1dGgiOiJZV0prYjIxdmEyZzZaR05yY2w5d1lYUmZVMEU0TlZoclJUTlhZMGh2WjFVMk1IaFhhbGhGVUY5NGVrMXIifX19

nameOverride: "gateway-microservice-demo"  # Override for the name of the application

fullnameOverride: ""  # Override for the full name of the application

serviceAccount:
  create: true  # Whether to create a service account for the application
  annotations: {}  # Annotations to apply to the service account
  name: ""  # Name of the service account (if not created)

annotations:
  prometheus.io/scrape: "true"  # Annotation for Prometheus to scrape metrics from this service

podAnnotations:
  sidecar.istio.io/inject: "true"  # Annotation to enable Istio sidecar injection for the pod

selectorLabels:
  app: spring-microservice  # Labels used to select the pods for this service

podSecurityContext:
  fsGroup: 2000  # Group ID for the podâ€™s file system (used for shared storage)

securityContext:
  capabilities:
    drop:
      - ALL  # Drop all Linux capabilities (for security)
  readOnlyRootFilesystem: true  # Make the root filesystem read-only (for security)
  runAsNonRoot: true  # Ensure the container runs as a non-root user
  runAsUser: 1000  # User ID for the container process

logging:
  volume:
    enabled: true  # Whether to enable the logging volume
    name: logging-volume  # Name of the volume
    size: 1Gi  # Size of the volume
    storageClassName: standard  # Storage class for the volume
    mountPath: /etc/config/app/logging.yaml  # Path where the volume will be mounted in the container
    subPath: logging.yaml  # File path within the volume
    readOnly: true  # Make the volume read-only

service:
  enabled: true  # Whether to create a service
  type: LoadBalancer  # Type of service (ClusterIP means it is only accessible within the cluster)
  httpPort: 80  # Port for HTTP traffic
  httpTargetPort: "8080"  # Target port for HTTP traffic in the container
  httpNodePort: 80  # NodePort for HTTP traffic (only relevant for NodePort service type)
  managementPort: 9090  # Port for management endpoints
  managementTargetPort: "9091"  # Target port for management endpoints in the container
  managementNodePort: null  # NodePort for management endpoints (only relevant for NodePort service type)
  labels:
    prometheus.io/target: spring-boot-actuator-instance  # Label for Prometheus to target this service

extraEnv:

podLabels:
  app: spring-microservice  # Labels applied to the pod
labels:
  app: spring-microservice  # Labels applied to the resources

secret:
  values:


docker:
  secretName: docker-registry  # Name of the Docker registry secret

envFrom:

config:
  annotations: {}  # Annotations for the ConfigMap
  labels: {}  # Labels for the ConfigMap
  log4j: |-
    Configuration:
      Appenders:
        Console:
          name: Console
          target: SYSTEM_OUT
          JsonLayout:
            compact: true
            eventEol: true
            includeTimeMillis: true
      Loggers:
        Root:
          level: INFO
          AppenderRef:
            - ref: Console
  application: |-
    server:
      port: 8080
    management:
      server:
        port: 9091
      endpoints:
        web:
          exposure:
            include: liveness,readiness,health
      health:
        ping:
          enabled: true
        probes:
          enabled: true
        livenessState:
          enabled: true
        readinessState:
          enabled: true
    spring:
      application:
        name: gateway-service
      cloud:
        gateway:
          routes:
            - id: users-service
              uri: lb://users-service
              predicates:
                - Path=/users/**
            - id: expenses-service
              uri: lb://expenses-service
              predicates:
                - Path=/expenses/**
            - id: categories-service
              uri: lb://categories-service
              predicates:
                - Path=/categories/**
        kubernetes:
          discovery:
            enabled: true
            discovery-server-url: http://192.168.49.2:8443

command:
#  - "java"
#  - "-jar"
#  - "/app.jar"

args:
#  - "--spring.config.location=/etc/config/app/application.yaml"

jvmOptions:
  - -XX:+UseContainerSupport  # JVM option to enable container-aware settings
  - -XX:MaxRAMPercentage=80.0  # JVM option to set maximum RAM usage percentage
  - -Djava.net.preferIPv4Stack=true  # JVM option to prefer IPv4 stack
  - -Djava.awt.headless=true  # JVM option to run in headless mode
  - -Dspring.config.additional-location=/etc/config/app/application.yaml  # JVM option to specify additional configuration file location

ingress:
  enabled: false  # Whether to create an ingress resource
  annotations: {}  # Annotations for the ingress
  hosts:
    - host: example.com
      paths:
        - /
  tls:
    - secretName: example-tls
      hosts:
        - example.com

livenessProbe:
  httpGet:
    path: /actuator/health/liveness  # HTTP path to check if the application is alive
    port: 9091  # Port for the liveness probe
  failureThreshold: 10  # Number of failed checks before restarting the pod
  periodSeconds: 10  # Frequency of the liveness checks

readinessProbe:
  httpGet:
    path: /actuator/health/readiness  # HTTP path to check if the application is ready to accept traffic
    port: 9091  # Port for the readiness probe
  failureThreshold: 10  # Number of failed checks before marking the pod as not ready
  periodSeconds: 60  # Frequency of the readiness checks

startupProbe:
  httpGet:
    path: /actuator/health/readiness  # HTTP path to check if the application has started correctly
    port: 9091  # Port for the startup probe
  failureThreshold: 10  # Number of failed checks before considering the pod as failed
  initialDelaySeconds: 60  # Delay before starting the first probe after pod startup
  periodSeconds: 60  # Frequency of the startup checks

resources:
  limits:
    cpu: 600m  # Maximum CPU resources the container can use
    memory: 912Mi  # Maximum memory resources the container can use
  requests:
    cpu: 400m  # CPU resources requested for the container
    memory: 556Mi  # Memory resources requested for the container

extraVolumeMounts:
#  - name: extra-config
#    mountPath: /etc/config/extra
#    readOnly: true

extraVolumes:
#  - name: extra-config
#    configMap:
#      name: extra-configmap.yaml

autoscaling:
  enabled: false  # Whether to enable horizontal pod autoscaling
  minReplicas: 1  # Minimum number of pod replicas
  maxReplicas: 5  # Maximum number of pod replicas
  targetCPUUtilizationPercentage: 80  # Target CPU utilization percentage for autoscaling
  targetMemoryUtilizationPercentage: 80  # Target memory utilization percentage for autoscaling

nodeSelector:
#  role: frontend  # Node selector to specify the node roles where the pod should be scheduled

tolerations:
  - key: "key"  # Key of the taint to tolerate
    operator: "Equal"  # Operator to match the taint
    value: "value"  # Value of the taint to tolerate
    effect: "NoSchedule"  # Effect of the taint

affinity:
  podAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: "app"  # The label key to match
              operator: "In"  # Operator to match
              values:
                - "spring-microservice"  # List of values to match
        topologyKey: "kubernetes.io/hostname"  # Key to group pods by

metricsConfig:
  enabled: true  # Whether to enable metrics collection
  annotations:
    prometheus.io/scrape: "true"  # Annotation for Prometheus to scrape metrics
    prometheus.io/port: "9090"  # Port for Prometheus to scrape metrics
  labels: {}  # Labels for the metrics configuration
  interval: 30s  # Scraping interval for metrics
  scrapeTimeout: 30s  # Timeout for scraping metrics
  path: /actuator/prometheus  # Path for metrics endpoint
  port: http-management  # Port name for the metrics endpoint
